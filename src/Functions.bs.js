// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_format = require("rescript/lib/js/caml_format.js");

var $$function = Caml_format.caml_float_of_string;

var convert = Caml_format.caml_float_of_string;

console.log(Caml_format.caml_float_of_string("456.8977"));

function aFunctionalExpression(language) {
  return language + "Repo";
}

console.log("ReScript Repo");

function ourRecord_addInts(int1, int2) {
  return int1 + int2 | 0;
}

function ourRecord_concatStrings(str1, str2) {
  return str1 + " " + str2;
}

var ourRecord = {
  addInts: ourRecord_addInts,
  concatStrings: ourRecord_concatStrings,
  title: "A Record of FUNCTIONS! ;)"
};

console.log(Curry._2(ourRecord_concatStrings, "This string..", "Will be added to this string"), Curry._2(ourRecord_addInts, 12345678, 11111111));

function add(a) {
  return a + 1 | 0;
}

function multiply(b) {
  return Math.imul(b, 10);
}

function compute(functionToApply, value) {
  return Curry._1(functionToApply, value);
}

console.log(11);

console.log(1230);

function compose2(f1, f2, value) {
  return Curry._1(f1, Curry._1(f2, value));
}

console.log("The output of compose2: ", 101);

function phaseOne(param) {
  return Math.imul(param, 10) + 1 | 0;
}

var phaseTwo = 101;

console.log("The result of phaseTwo: ", phaseTwo);

function compose2UnderHood(f1, f2, value) {
  return Curry._1(f1, Curry._1(f2, value));
}

exports.$$function = $$function;
exports.convert = convert;
exports.aFunctionalExpression = aFunctionalExpression;
exports.ourRecord = ourRecord;
exports.add = add;
exports.multiply = multiply;
exports.compute = compute;
exports.compose2 = compose2;
exports.phaseOne = phaseOne;
exports.phaseTwo = phaseTwo;
exports.compose2UnderHood = compose2UnderHood;
/*  Not a pure module */
